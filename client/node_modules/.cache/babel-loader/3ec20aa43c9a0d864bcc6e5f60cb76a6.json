{"ast":null,"code":"var _jsxFileName = \"D:\\\\shoppingManagement\\\\client\\\\src\\\\components\\\\Auth\\\\Auth.js\";\nimport React from \"react\";\nfunction Auth() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 4,\n      columnNumber: 10\n    }\n  }, \"Auth\");\n}\nexport default Auth;\n\n// import React, { AuthuseState } from \"react\";\n// import { AUTH } from \"../../constants/actionTypes\";\n// import { GoogleLogin, googleLogout } from \"@react-oauth/google\";\n// import { useHistory } from \"react-router-dom\";\n// import {\n//   Avatar,\n//   Button,\n//   Typography,\n//   Paper,\n//   Grid,\n//   Container,\n// } from \"@material-ui/core\";\n// import Input from \"./Input\";\n// import LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\n// import useStyles from \"./styles\";\n// import jwt_decode from \"jwt-decode\";\n// import { signup, signin } from \"../../actions/auth\";\n// import { useDispatch } from \"react-redux\";\n\n// //* for formData validation\n// import { validate } from \"../../creadentialValidation/validation\";\n// import Modal from \"../Modal/Modal\";\n\n// // initial variable\n// const initialState = {\n//   firstName: \"\",\n//   lastName: \"\",\n//   email: \"\",\n//   password: \"\",\n//   confirmPassword: \"\",\n// };\n\n// const Auth = () => {\n//   const classes = useStyles();\n//   const [isSignup, setIsSignup] = useState(false);\n\n//   //state for signin and signup\n//   const [formData, setFormData] = useState(initialState);\n\n//   const [showPassword, setShowPassword] = useState(false);\n\n//   const [isOpen, setIsOpen] = useState(false);\n\n//   const [errobj, setErrorObj] = useState({ errorStatus: false, message: \"\" });\n\n//   const dispatch = useDispatch();\n\n//   const history = useHistory();\n\n//   let obj = {};\n//   let actionObj = {};\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     obj = validate(formData, isSignup);\n//     setErrorObj((errobj) => ({\n//       ...errobj,\n//       ...obj,\n//     }));\n\n//     if (obj.errorStatus) {\n//       setIsOpen(true);\n//     } else {\n//       if (isSignup) {\n//         // validate before checking and alert that error\n//         //! checking if action executed smoothly...\n//         actionObj = await dispatch(signup(formData, history));\n\n//         if (actionObj?.message) {\n//           //! this code executes if there is an issue in login\n//           setErrorObj((errobj) => ({\n//             ...errobj,\n//             message: actionObj.message,\n//           }));\n\n//           setIsOpen(true);\n//         } else {\n//           //! this code executes if there is no issue in auth...\n//           setErrorObj((errobj) => ({\n//             ...errobj,\n//             message: \"Yay ! You Registered successfully!\",\n//           }));\n//           console.log(errobj, \"here\");\n//           setIsOpen(true);\n//         }\n//       } else {\n//         //! checking if action executed smoothly...\n//         actionObj = await dispatch(signin(formData, history));\n\n//         if (actionObj?.message) {\n//           //! this code executes if there is an issue in login\n//           setErrorObj((errobj) => ({\n//             ...errobj,\n//             message: actionObj.message,\n//           }));\n\n//           setIsOpen(true);\n//         } else {\n//           //! this code executes if there is no issue in auth...\n//           setErrorObj((errobj) => ({\n//             ...errobj,\n//             message: \"Login successful\",\n//           }));\n\n//           console.log(errobj, \"here\");\n//           //! enables the modal\n//           setIsOpen(true);\n//         }\n//       }\n//     }\n//   };\n\n//   const handleChange = (e) => {\n//     setFormData({ ...formData, [e.target.name]: e.target.value });\n//   };\n\n//   const handleShowPassword = () => {\n//     //! whenever you are changing the state using its previous state, then you need to use callback function with the prev state as its argument...\n//     setShowPassword((prevShowPassword) => !prevShowPassword);\n//   };\n\n//   const switchMode = () => {\n//     setIsSignup((prevIsSignup) => !prevIsSignup);\n//     setShowPassword(false);\n//   };\n\n//   const googleSuccess = async (res) => {\n//     console.log(jwt_decode(res?.credential));\n//     const token = res?.credential;\n//     const result = jwt_decode(res?.credential);\n\n//     try {\n//       dispatch({ type: AUTH, data: { result, token } });\n//       history.push(\"/\");\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   };\n\n//   const googleFailure = () => {};\n\n//   return (\n//     <Container component=\"main\" maxWidth=\"xs\">\n//       <Paper className={classes.paper} elevation={3}>\n//         <Avatar className={classes.avatar}>\n//           <LockOutlinedIcon />\n//         </Avatar>\n//         <Typography variant=\"h5\">{isSignup ? \"Register\" : \"Login\"}</Typography>\n//         <form className={classes.form} onSubmit={handleSubmit}>\n//           <Grid container spacing={2}>\n//             {isSignup && (\n//               <>\n//                 <Input\n//                   name=\"firstName\"\n//                   label=\"First Name\"\n//                   handleChange={handleChange}\n//                   autoFocus\n//                   half\n//                 />\n//                 <Input\n//                   name=\"lastName\"\n//                   label=\"Last Name\"\n//                   handleChange={handleChange}\n//                   half\n//                 />\n//               </>\n//             )}\n//             <Input\n//               name=\"email\"\n//               label=\"Email Address\"\n//               handleChange={handleChange}\n//               type=\"email\"\n//             />\n//             <Input\n//               name=\"password\"\n//               label=\"Password\"\n//               handleChange={handleChange}\n//               type={showPassword ? \"text\" : \"password\"}\n//               handleShowPassword={handleShowPassword}\n//             />\n//             {isSignup && (\n//               <Input\n//                 name=\"confirmPassword\"\n//                 label=\"Confirm Password\"\n//                 handleChange={handleChange}\n//                 type=\"password\"\n//               />\n//             )}\n//           </Grid>\n//           <Button\n//             className={classes.submit}\n//             type=\"submit\"\n//             fullWidth\n//             variant=\"contained\"\n//             color=\"primary\"\n//           >\n//             {isSignup ? \"Register\" : \"Login\"}\n//           </Button>\n//           <GoogleLogin\n//             render={(renderProps) => (\n//               <Button\n//                 className={classes.googleButton}\n//                 color=\"primary\"\n//                 fullWidth\n//                 onClick={renderProps.onClick}\n//                 disabled={renderProps.disabled}\n//                 variant=\"contained\"\n//               >\n//                 Google Login\n//               </Button>\n//             )}\n//             onSuccess={googleSuccess}\n//             onError={googleFailure}\n//           />\n//           <Grid container justifyContent=\"flex-end\">\n//             <Grid item>\n//               <Button onClick={switchMode}>\n//                 {isSignup\n//                   ? \"Already have an account ?, Login\"\n//                   : \"Dont have an account ?, Register\"}\n//               </Button>\n//             </Grid>\n//           </Grid>\n//         </form>\n//       </Paper>\n//       <Modal open={isOpen} onClose={() => setIsOpen(false)}>\n//         {errobj.message}\n//       </Modal>\n//     </Container>\n//   );\n// };\n\n// export default Auth;","map":{"version":3,"names":["React","Auth","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["D:/shoppingManagement/client/src/components/Auth/Auth.js"],"sourcesContent":["import React from \"react\";\r\n\r\nfunction Auth() {\r\n  return <div>Auth</div>;\r\n}\r\n\r\nexport default Auth;\r\n\r\n// import React, { AuthuseState } from \"react\";\r\n// import { AUTH } from \"../../constants/actionTypes\";\r\n// import { GoogleLogin, googleLogout } from \"@react-oauth/google\";\r\n// import { useHistory } from \"react-router-dom\";\r\n// import {\r\n//   Avatar,\r\n//   Button,\r\n//   Typography,\r\n//   Paper,\r\n//   Grid,\r\n//   Container,\r\n// } from \"@material-ui/core\";\r\n// import Input from \"./Input\";\r\n// import LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\n// import useStyles from \"./styles\";\r\n// import jwt_decode from \"jwt-decode\";\r\n// import { signup, signin } from \"../../actions/auth\";\r\n// import { useDispatch } from \"react-redux\";\r\n\r\n// //* for formData validation\r\n// import { validate } from \"../../creadentialValidation/validation\";\r\n// import Modal from \"../Modal/Modal\";\r\n\r\n// // initial variable\r\n// const initialState = {\r\n//   firstName: \"\",\r\n//   lastName: \"\",\r\n//   email: \"\",\r\n//   password: \"\",\r\n//   confirmPassword: \"\",\r\n// };\r\n\r\n// const Auth = () => {\r\n//   const classes = useStyles();\r\n//   const [isSignup, setIsSignup] = useState(false);\r\n\r\n//   //state for signin and signup\r\n//   const [formData, setFormData] = useState(initialState);\r\n\r\n//   const [showPassword, setShowPassword] = useState(false);\r\n\r\n//   const [isOpen, setIsOpen] = useState(false);\r\n\r\n//   const [errobj, setErrorObj] = useState({ errorStatus: false, message: \"\" });\r\n\r\n//   const dispatch = useDispatch();\r\n\r\n//   const history = useHistory();\r\n\r\n//   let obj = {};\r\n//   let actionObj = {};\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     obj = validate(formData, isSignup);\r\n//     setErrorObj((errobj) => ({\r\n//       ...errobj,\r\n//       ...obj,\r\n//     }));\r\n\r\n//     if (obj.errorStatus) {\r\n//       setIsOpen(true);\r\n//     } else {\r\n//       if (isSignup) {\r\n//         // validate before checking and alert that error\r\n//         //! checking if action executed smoothly...\r\n//         actionObj = await dispatch(signup(formData, history));\r\n\r\n//         if (actionObj?.message) {\r\n//           //! this code executes if there is an issue in login\r\n//           setErrorObj((errobj) => ({\r\n//             ...errobj,\r\n//             message: actionObj.message,\r\n//           }));\r\n\r\n//           setIsOpen(true);\r\n//         } else {\r\n//           //! this code executes if there is no issue in auth...\r\n//           setErrorObj((errobj) => ({\r\n//             ...errobj,\r\n//             message: \"Yay ! You Registered successfully!\",\r\n//           }));\r\n//           console.log(errobj, \"here\");\r\n//           setIsOpen(true);\r\n//         }\r\n//       } else {\r\n//         //! checking if action executed smoothly...\r\n//         actionObj = await dispatch(signin(formData, history));\r\n\r\n//         if (actionObj?.message) {\r\n//           //! this code executes if there is an issue in login\r\n//           setErrorObj((errobj) => ({\r\n//             ...errobj,\r\n//             message: actionObj.message,\r\n//           }));\r\n\r\n//           setIsOpen(true);\r\n//         } else {\r\n//           //! this code executes if there is no issue in auth...\r\n//           setErrorObj((errobj) => ({\r\n//             ...errobj,\r\n//             message: \"Login successful\",\r\n//           }));\r\n\r\n//           console.log(errobj, \"here\");\r\n//           //! enables the modal\r\n//           setIsOpen(true);\r\n//         }\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const handleChange = (e) => {\r\n//     setFormData({ ...formData, [e.target.name]: e.target.value });\r\n//   };\r\n\r\n//   const handleShowPassword = () => {\r\n//     //! whenever you are changing the state using its previous state, then you need to use callback function with the prev state as its argument...\r\n//     setShowPassword((prevShowPassword) => !prevShowPassword);\r\n//   };\r\n\r\n//   const switchMode = () => {\r\n//     setIsSignup((prevIsSignup) => !prevIsSignup);\r\n//     setShowPassword(false);\r\n//   };\r\n\r\n//   const googleSuccess = async (res) => {\r\n//     console.log(jwt_decode(res?.credential));\r\n//     const token = res?.credential;\r\n//     const result = jwt_decode(res?.credential);\r\n\r\n//     try {\r\n//       dispatch({ type: AUTH, data: { result, token } });\r\n//       history.push(\"/\");\r\n//     } catch (error) {\r\n//       console.log(error);\r\n//     }\r\n//   };\r\n\r\n//   const googleFailure = () => {};\r\n\r\n//   return (\r\n//     <Container component=\"main\" maxWidth=\"xs\">\r\n//       <Paper className={classes.paper} elevation={3}>\r\n//         <Avatar className={classes.avatar}>\r\n//           <LockOutlinedIcon />\r\n//         </Avatar>\r\n//         <Typography variant=\"h5\">{isSignup ? \"Register\" : \"Login\"}</Typography>\r\n//         <form className={classes.form} onSubmit={handleSubmit}>\r\n//           <Grid container spacing={2}>\r\n//             {isSignup && (\r\n//               <>\r\n//                 <Input\r\n//                   name=\"firstName\"\r\n//                   label=\"First Name\"\r\n//                   handleChange={handleChange}\r\n//                   autoFocus\r\n//                   half\r\n//                 />\r\n//                 <Input\r\n//                   name=\"lastName\"\r\n//                   label=\"Last Name\"\r\n//                   handleChange={handleChange}\r\n//                   half\r\n//                 />\r\n//               </>\r\n//             )}\r\n//             <Input\r\n//               name=\"email\"\r\n//               label=\"Email Address\"\r\n//               handleChange={handleChange}\r\n//               type=\"email\"\r\n//             />\r\n//             <Input\r\n//               name=\"password\"\r\n//               label=\"Password\"\r\n//               handleChange={handleChange}\r\n//               type={showPassword ? \"text\" : \"password\"}\r\n//               handleShowPassword={handleShowPassword}\r\n//             />\r\n//             {isSignup && (\r\n//               <Input\r\n//                 name=\"confirmPassword\"\r\n//                 label=\"Confirm Password\"\r\n//                 handleChange={handleChange}\r\n//                 type=\"password\"\r\n//               />\r\n//             )}\r\n//           </Grid>\r\n//           <Button\r\n//             className={classes.submit}\r\n//             type=\"submit\"\r\n//             fullWidth\r\n//             variant=\"contained\"\r\n//             color=\"primary\"\r\n//           >\r\n//             {isSignup ? \"Register\" : \"Login\"}\r\n//           </Button>\r\n//           <GoogleLogin\r\n//             render={(renderProps) => (\r\n//               <Button\r\n//                 className={classes.googleButton}\r\n//                 color=\"primary\"\r\n//                 fullWidth\r\n//                 onClick={renderProps.onClick}\r\n//                 disabled={renderProps.disabled}\r\n//                 variant=\"contained\"\r\n//               >\r\n//                 Google Login\r\n//               </Button>\r\n//             )}\r\n//             onSuccess={googleSuccess}\r\n//             onError={googleFailure}\r\n//           />\r\n//           <Grid container justifyContent=\"flex-end\">\r\n//             <Grid item>\r\n//               <Button onClick={switchMode}>\r\n//                 {isSignup\r\n//                   ? \"Already have an account ?, Login\"\r\n//                   : \"Dont have an account ?, Register\"}\r\n//               </Button>\r\n//             </Grid>\r\n//           </Grid>\r\n//         </form>\r\n//       </Paper>\r\n//       <Modal open={isOpen} onClose={() => setIsOpen(false)}>\r\n//         {errobj.message}\r\n//       </Modal>\r\n//     </Container>\r\n//   );\r\n// };\r\n\r\n// export default Auth;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,IAAIA,CAAA,EAAG;EACd,oBAAOD,KAAA,CAAAE,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAK,MAAS,CAAC;AACxB;AAEA,eAAeP,IAAI;;AAEnignoreList":[]},"metadata":{},"sourceType":"module"}